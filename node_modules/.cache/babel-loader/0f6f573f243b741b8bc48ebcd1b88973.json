{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, set, get, child } from 'firebase/database';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDsWF9bfj4Q0m1U_bGqVujBZN0m2IGyTqA\",\n  authDomain: \"levweb-ed212.firebaseapp.com\",\n  databaseURL: \"https://levweb-ed212-default-rtdb.firebaseio.com\",\n  projectId: \"levweb-ed212\",\n  storageBucket: \"levweb-ed212.appspot.com\",\n  messagingSenderId: \"231643766080\",\n  appId: \"1:231643766080:web:0d18f08e6eac8287aaeea5\",\n  measurementId: \"G-E5J799N7GD\"\n};\n\nclass Database {\n  constructor() {\n    this.getFaq = async () => {\n      const faq = await get(child(ref(this.database), 'faq'));\n      return faq.val();\n    };\n\n    this.getFaqSize = async () => {\n      const faq = await get(child(ref(this.database), 'faq'));\n      return faq.exists ? faq.size : 0;\n    };\n\n    this.ask = async (author, authorEmail, question, type) => {\n      const id = (await this.getFaqSize()) + 1;\n      set(ref(this.database, 'faq/' + id), {\n        author,\n        authorEmail,\n        type,\n        question,\n        answer: ''\n      });\n    };\n\n    this.app = initializeApp(firebaseConfig);\n    this.analytics = getAnalytics(this.app);\n    this.database = getDatabase(this.app);\n  }\n\n}\n\nexport default Database;","map":{"version":3,"sources":["/mnt/c/Users/black/OneDrive/Área de Trabalho/gstao/lev-website/src/firebase/firebase.js"],"names":["initializeApp","getAnalytics","getDatabase","ref","set","get","child","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Database","constructor","getFaq","faq","database","val","getFaqSize","exists","size","ask","author","authorEmail","question","type","id","answer","app","analytics"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,WAAT,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,mBAAlD;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,8BAFS;AAGrBC,EAAAA,WAAW,EAAE,kDAHQ;AAIrBC,EAAAA,SAAS,EAAE,cAJU;AAKrBC,EAAAA,aAAa,EAAE,0BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB;;AAWA,MAAMC,QAAN,CAAe;AAKbC,EAAAA,WAAW,GAAE;AAAA,SAMbC,MANa,GAMJ,YAAY;AACnB,YAAMC,GAAG,GAAG,MAAMd,GAAG,CAACC,KAAK,CAACH,GAAG,CAAC,KAAKiB,QAAN,CAAJ,EAAqB,KAArB,CAAN,CAArB;AACA,aAAOD,GAAG,CAACE,GAAJ,EAAP;AACD,KATY;;AAAA,SAWbC,UAXa,GAWA,YAAY;AACvB,YAAMH,GAAG,GAAG,MAAMd,GAAG,CAACC,KAAK,CAACH,GAAG,CAAC,KAAKiB,QAAN,CAAJ,EAAqB,KAArB,CAAN,CAArB;AAEA,aAAOD,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACK,IAAjB,GAAwB,CAA/B;AACD,KAfY;;AAAA,SAiBbC,GAjBa,GAiBP,OAAOC,MAAP,EAAeC,WAAf,EAA4BC,QAA5B,EAAsCC,IAAtC,KAA+C;AACnD,YAAMC,EAAE,GAAG,OAAM,KAAKR,UAAL,EAAN,IAA0B,CAArC;AACAlB,MAAAA,GAAG,CAACD,GAAG,CAAC,KAAKiB,QAAN,EAAgB,SAASU,EAAzB,CAAJ,EAAkC;AACnCJ,QAAAA,MADmC;AAEnCC,QAAAA,WAFmC;AAGnCE,QAAAA,IAHmC;AAInCD,QAAAA,QAJmC;AAKnCG,QAAAA,MAAM,EAAE;AAL2B,OAAlC,CAAH;AAOD,KA1BY;;AACX,SAAKC,GAAL,GAAWhC,aAAa,CAACO,cAAD,CAAxB;AACA,SAAK0B,SAAL,GAAiBhC,YAAY,CAAC,KAAK+B,GAAN,CAA7B;AACA,SAAKZ,QAAL,GAAgBlB,WAAW,CAAC,KAAK8B,GAAN,CAA3B;AACD;;AATY;;AAmCf,eAAehB,QAAf","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, set, get, child } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDsWF9bfj4Q0m1U_bGqVujBZN0m2IGyTqA\",\n  authDomain: \"levweb-ed212.firebaseapp.com\",\n  databaseURL: \"https://levweb-ed212-default-rtdb.firebaseio.com\",\n  projectId: \"levweb-ed212\",\n  storageBucket: \"levweb-ed212.appspot.com\",\n  messagingSenderId: \"231643766080\",\n  appId: \"1:231643766080:web:0d18f08e6eac8287aaeea5\",\n  measurementId: \"G-E5J799N7GD\"\n};\n\nclass Database {\n  app;\n  analytics;\n  database;\n\n  constructor(){\n    this.app = initializeApp(firebaseConfig);\n    this.analytics = getAnalytics(this.app);\n    this.database = getDatabase(this.app);\n  }\n  \n  getFaq = async () => {\n    const faq = await get(child(ref(this.database), 'faq'));\n    return faq.val();\n  }\n\n  getFaqSize = async () => {\n    const faq = await get(child(ref(this.database), 'faq'));\n\n    return faq.exists ? faq.size : 0;\n  }\n\n  ask = async (author, authorEmail, question, type) => {\n    const id = await this.getFaqSize() + 1; \n    set(ref(this.database, 'faq/' + id), {\n      author,\n      authorEmail,\n      type,\n      question,\n      answer: '',\n    });\n  }\n\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}